/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package randomize;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.InputStream;
import java.io.StringReader;
import java.util.ArrayList;
import javax.swing.JFileChooser;

/**
 *
 * @author Ben
 */
public class MainWindow extends javax.swing.JFrame {

    /**
     * Creates new form MainWindow
     */
    File extFile;
    String oldFileName;
    //String windowContent;
    InputStream fis;
    String initText = "Enter the directory that contains your files in the field above. You can then either manually enter the extensions of the files in the field to the right, or load a saved extensions file by entering the name of the file including it's directory path (e.g. C:Program Files\\File Randomizer\\randomExt.txt).\nYou can also navigate to the directory and file locations using the File menu.";
    JFileChooser chooser;
    
    public MainWindow() {
        initComponents();

        largeTextArea.setText(initText);
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    System.out.println("Design set: Windows");
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        fileChooser = new javax.swing.JFileChooser();
        mainPanel = new javax.swing.JPanel();
        randomButton = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        largeTextArea = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        deRandomButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        extensionsTextArea = new javax.swing.JTextArea();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        saveButton = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        saveNameField = new javax.swing.JTextField();
        loadButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        loadTextField = new javax.swing.JTextField();
        pathNameTextField = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        menuBar = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        findDirectory = new javax.swing.JMenuItem();
        loadFileMenu = new javax.swing.JMenuItem();
        saveFileMenuButton = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        aboutMenuButton = new javax.swing.JMenuItem();

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        fileChooser.setDialogTitle("Select directory to randomize");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("File Randomizer");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setForeground(java.awt.Color.darkGray);
        setMinimumSize(new java.awt.Dimension(530, 500));
        setResizable(false);
        getContentPane().setLayout(null);

        mainPanel.setBackground(new java.awt.Color(201, 210, 240));
        mainPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        mainPanel.setMinimumSize(new java.awt.Dimension(530, 470));
        mainPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        randomButton.setText("Randomize!");
        randomButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        randomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomButtonActionPerformed(evt);
            }
        });
        mainPanel.add(randomButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, 125, 70));

        largeTextArea.setColumns(20);
        largeTextArea.setLineWrap(true);
        largeTextArea.setRows(5);
        largeTextArea.setWrapStyleWord(true);
        largeTextArea.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jScrollPane5.setViewportView(largeTextArea);

        mainPanel.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 130, 260, 160));

        jTextField1.setBackground(new java.awt.Color(201, 210, 240));
        jTextField1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTextField1.setText(".ext");
        jTextField1.setBorder(null);
        mainPanel.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 100, 50, 30));

        deRandomButton.setText("deRandomize!");
        deRandomButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        deRandomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deRandomButtonActionPerformed(evt);
            }
        });
        mainPanel.add(deRandomButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 220, 125, 70));

        extensionsTextArea.setColumns(20);
        extensionsTextArea.setRows(5);
        extensionsTextArea.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jScrollPane3.setViewportView(extensionsTextArea);

        mainPanel.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 130, 80, 160));

        jScrollPane4.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane4.setViewportView(jTextArea3);

        mainPanel.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 130, 260, 158));

        saveButton.setText("Save");
        saveButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        mainPanel.add(saveButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 370, 80, 40));

        jLabel3.setText("Directory to save new extension file (randomExt.txt)");
        mainPanel.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 390, 320, 20));

        saveNameField.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        mainPanel.add(saveNameField, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 370, 360, -1));

        loadButton.setText("Load");
        loadButton.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });
        mainPanel.add(loadButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 310, 80, 40));

        jLabel2.setText("Directory of saved extension file (randomExt.txt)");
        mainPanel.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 330, 290, 20));

        loadTextField.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        mainPanel.add(loadTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 310, 360, -1));

        pathNameTextField.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        pathNameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pathNameTextFieldActionPerformed(evt);
            }
        });
        mainPanel.add(pathNameTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 100, 390, -1));

        jTextField3.setEditable(false);
        jTextField3.setBackground(new java.awt.Color(201, 210, 240));
        jTextField3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jTextField3.setText("Directory to Change:");
        jTextField3.setBorder(null);
        mainPanel.add(jTextField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, 150, 20));

        jTextField4.setBackground(new java.awt.Color(201, 210, 240));
        jTextField4.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        jTextField4.setText("File Randomizer");
        jTextField4.setBorder(null);
        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });
        mainPanel.add(jTextField4, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 20, 270, -1));

        getContentPane().add(mainPanel);
        mainPanel.setBounds(0, 0, 520, 450);

        menuBar.setBackground(new java.awt.Color(201, 210, 240));
        menuBar.setToolTipText("");
        menuBar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jMenu3.setText("File");

        findDirectory.setText("Find Directory");
        findDirectory.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                findDirectoryMouseClicked(evt);
            }
        });
        findDirectory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findDirectoryActionPerformed(evt);
            }
        });
        jMenu3.add(findDirectory);

        loadFileMenu.setText("Load Extensions from File");
        loadFileMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadFileMenuActionPerformed(evt);
            }
        });
        jMenu3.add(loadFileMenu);

        saveFileMenuButton.setText("Save Extensions to File");
        saveFileMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileMenuButtonActionPerformed(evt);
            }
        });
        jMenu3.add(saveFileMenuButton);

        menuBar.add(jMenu3);

        jMenu1.setText("Help");

        aboutMenuButton.setText("About");
        aboutMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuButtonActionPerformed(evt);
            }
        });
        jMenu1.add(aboutMenuButton);

        menuBar.add(jMenu1);

        setJMenuBar(menuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
        //ArrayList<String> extensions = new ArrayList<String>();
        try {
            String ext = extensionsTextArea.getText();
            String path = saveNameField.getText();
            File outFile = new File(path);
            System.out.println("Text Area: " + "\n" + ext);
        //System.out.println(ext);

            StringReader stringReader = new StringReader(ext);
            BufferedReader reader = new BufferedReader(stringReader);
            FileWriter writer = new FileWriter(outFile);
            BufferedWriter bufferedWriter = new BufferedWriter(writer);
            for (String line = reader.readLine(); line != null; line = reader.readLine()) {
                bufferedWriter.write(line);
                bufferedWriter.newLine();
            }
            reader.close();

            //System.out.println("Got to for loop");
            //writer.write(ext + "\n");
            // }
            // writer.write(ext);
     /*   BufferedReader extReader = new BufferedReader(new FileReader(ext));
             String line;
             while ((line = extReader.readLine()) != null){
             writer.write(line);
             //writer.write("\n");
             //extensions.add(line);
             }
             System.out.println(ext);
             for (String str : extensions){
             writer.write (str);
             }
        
             //BufferedReader extReader = new BufferedReader(new FileReader());
             */
            //close writer
            bufferedWriter.close();
        } catch (Exception e) {
            System.out.println("Error writing file: " + e);
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void randomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomButtonActionPerformed
        // TODO add your handling code here:
        String filesDir = this.pathNameTextField.getText();
        String extString = extensionsTextArea.getText();
        File[] files = new File(filesDir).listFiles();
        System.out.println(files);
        randomize(files, extString);
    }//GEN-LAST:event_randomButtonActionPerformed

    private void deRandomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deRandomButtonActionPerformed
        // TODO add your handling code here:
        String filesDir = this.pathNameTextField.getText();
        File[] files = new File(filesDir).listFiles();
        System.out.println(files);
        deRandomize(files, filesDir);
    }//GEN-LAST:event_deRandomButtonActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        // TODO add your handling code here:
        oldFileName = loadTextField.getText();
        try {
            BufferedReader extReader = new BufferedReader(new FileReader(oldFileName));
            StringBuilder sb = new StringBuilder();
            String line = extReader.readLine();

            while (line != null) {
                sb.append(line);
                sb.append(System.lineSeparator());
                line = extReader.readLine();
            }
            String fullList = sb.toString();
            extensionsTextArea.setText(fullList);

        } catch (Exception e) {
            System.out.println("Error loading extensions file: " + e);
        }

    }//GEN-LAST:event_loadButtonActionPerformed

    private void pathNameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pathNameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pathNameTextFieldActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void findDirectoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_findDirectoryMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_findDirectoryMouseClicked

    private void findDirectoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findDirectoryActionPerformed
        // TODO add your handling code here:
//        int returnVal = fileChooser.showOpenDialog(this);
//    if (returnVal == JFileChooser.APPROVE_OPTION) {
//        File file = fileChooser.getSelectedFile();
//        try {
//          // What to do with the file, e.g. display it in a TextArea
//          pathNameTextField.read( new FileReader( file.getAbsolutePath() ), null );
//        } catch (IOException ex) {
//          System.out.println("problem accessing file"+file.getAbsolutePath());
//        }
//    } else {
//        System.out.println("File access cancelled by user.");
//    }
        int result;
        
    chooser = new JFileChooser(); 
    chooser.setCurrentDirectory(new java.io.File("."));
    chooser.setDialogTitle("Select directory to be randomized");
    chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    //
    // disable the "All files" option.
    //
    chooser.setAcceptAllFileFilterUsed(false);
    //    
    if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { 
//      System.out.println("getCurrentDirectory(): " 
//         +  chooser.getCurrentDirectory());
//      System.out.println("getSelectedFile() : " 
//         +  chooser.getSelectedFile());
        //pathNameTextField.setText(chooser.getSelectedFile());
      File randomDir = chooser.getSelectedFile();
      String dirString = randomDir.toString();
      pathNameTextField.setText(dirString);
      }
    else {
      System.out.println("No Selection ");
      }
    }//GEN-LAST:event_findDirectoryActionPerformed

    private void loadFileMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadFileMenuActionPerformed
        // TODO add your handling code here:
        int result;
        
    chooser = new JFileChooser(); 
    chooser.setCurrentDirectory(new java.io.File("."));
    chooser.setDialogTitle("Select directory to be randomized");
    chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
    //
    // disable the "All files" option.
    //
    //chooser.setAcceptAllFileFilterUsed(false);
    //    
    if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { 
//      System.out.println("getCurrentDirectory(): " 
//         +  chooser.getCurrentDirectory());
//      System.out.println("getSelectedFile() : " 
//         +  chooser.getSelectedFile());
        File extFile = chooser.getSelectedFile();
        String fileString = extFile.toString();
        loadTextField.setText(fileString);
        //loadButtonActionPerformed();
        
   //     pathNameTextField.setText(chooser.getSelectedFile();
      }
    else {
      System.out.println("No Selection ");
      }
    
    oldFileName = loadTextField.getText();
        try {
            BufferedReader extReader = new BufferedReader(new FileReader(oldFileName));
            StringBuilder sb = new StringBuilder();
            String line = extReader.readLine();

            while (line != null) {
                sb.append(line);
                sb.append(System.lineSeparator());
                line = extReader.readLine();
            }
            String fullList = sb.toString();
            extensionsTextArea.setText(fullList);

        } catch (Exception e) {
            System.out.println("Error loading extensions file: " + e);
        }
    }//GEN-LAST:event_loadFileMenuActionPerformed

    private void saveFileMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileMenuButtonActionPerformed
        // TODO add your handling code here:
        chooser = new JFileChooser(); 
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Select directory to be randomized");
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        //
        // disable the "All files" option.
        //
        //chooser.setAcceptAllFileFilterUsed(false);
        //    
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) { 
    //      System.out.println("getCurrentDirectory(): " 
    //         +  chooser.getCurrentDirectory());
    //      System.out.println("getSelectedFile() : " 
    //         +  chooser.getSelectedFile());
            File extFile = chooser.getSelectedFile();
            String fileString = extFile.toString();
            saveNameField.setText(fileString);
            //loadButtonActionPerformed();

       //     pathNameTextField.setText(chooser.getSelectedFile();
          }
        else {
          System.out.println("No Selection ");
          }
        
        try {
            String ext = extensionsTextArea.getText();
            String path = saveNameField.getText();
            File outFile = new File(path);
            System.out.println("Text Area: " + "\n" + ext);
        //System.out.println(ext);

            StringReader stringReader = new StringReader(ext);
            BufferedReader reader = new BufferedReader(stringReader);
            FileWriter writer = new FileWriter(outFile);
            BufferedWriter bufferedWriter = new BufferedWriter(writer);
            for (String line = reader.readLine(); line != null; line = reader.readLine()) {
                bufferedWriter.write(line);
                bufferedWriter.newLine();
            }
            reader.close();

            bufferedWriter.close();
        } catch (Exception e) {
            System.out.println("Error writing file: " + e);
        }
    }//GEN-LAST:event_saveFileMenuButtonActionPerformed

    private void aboutMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuButtonActionPerformed
        // TODO add your handling code here:
        AboutWindow aw = new AboutWindow();
        aw.setVisible(true);
    }//GEN-LAST:event_aboutMenuButtonActionPerformed

    public static void randomize(File[] files, String extString) {
        ArrayList<String> extensions = new ArrayList<String>();

        try {
            BufferedReader extReader = new BufferedReader(new StringReader(extensionsTextArea.getText()));

            //StringBuilder builder = new StringBuilder();
            //System.out.println("Builder: " + builder);
            //int charsRead = -1;
            //char[] chars = new char[500];

            String line=null;
            while ((line = extReader.readLine()) != null) {
                //charsRead = extReader.read(chars,0,chars.length);

                if (line.charAt(0) == '.') {
                    extensions.add(line);
                    System.out.println("Line added: " + line);
                    //extensions[arrayLength] = line;
                }

            }
            extReader.close();

        } catch (Exception e) {
            System.out.println("Error reading extensions file: " + e);
        }

        for (String extension : extensions) {
            for (File f : files) {
                String fileName = f.getName();
                if (fileName.contains(extension)) {
                    String oldName = f.getName();
                    char specialChar = oldName.charAt(4); //Checks for the special character ')' to see if the file has already been randomized.
                    if (specialChar == ')') {
                        oldName = oldName.substring(5);
                    }
                    int randNum = (int) (Math.random() * (9999 - 1000) + 1000);
                    String randString = Integer.toString(randNum);
                    System.out.println(f);
                    String newName = (randString + ")" + oldName);

                    // File (or directory) with new name
                    try {

                        String randomDir = pathNameTextField.getText();
                        File newFile = new File(randomDir, newName);
                        boolean success = f.renameTo(newFile);
                        System.out.println(newFile);
                        if (!success) {
                            System.out.println("Randomization unsuccessful");

                        } else {
                            f.renameTo(newFile);
                            System.out.println("Renamed to: " + newFile);

                        }
                    } catch (Exception e) {
                        System.out.println("Error: File exists.\n" + e);
                    }
                }
            }

            // Rename file (or directory)
            // File was not successfully renamed
        }
    } //end of Randomize method

    /**
     * @param args the command line arguments
     */

    public static void deRandomize(File[] files, String filesDir) {
        for (File f : files) {
            String fileName = f.getName();
            char specialChar;
            String newName;
            specialChar = fileName.charAt(4);
            if (specialChar == ')') {
                newName = fileName.substring(5);
            } else {
                newName = fileName;
            }
            try {
                File newFile = new File(filesDir, newName);
                boolean success = f.renameTo(newFile);
                System.out.println(newFile);
                if (!success) {
                    System.out.println("Randomization unsuccessful");

                } else {
                    f.renameTo(newFile);
                    System.out.println("Renamed to: " + newFile);

                }
            } catch (Exception e) {
                System.out.println("Error: File exists.\n" + e);
            }
        }
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    System.out.println("Design set: Windows");
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuButton;
    private javax.swing.JButton deRandomButton;
    private static javax.swing.JTextArea extensionsTextArea;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenuItem findDirectory;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextArea largeTextArea;
    private javax.swing.JButton loadButton;
    private javax.swing.JMenuItem loadFileMenu;
    private javax.swing.JTextField loadTextField;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private static javax.swing.JTextField pathNameTextField;
    private javax.swing.JButton randomButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JMenuItem saveFileMenuButton;
    private javax.swing.JTextField saveNameField;
    // End of variables declaration//GEN-END:variables
}
